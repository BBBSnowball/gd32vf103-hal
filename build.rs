// Ref: Sha Miao, rv32m1_ri5cy-example/build.rs

use std::env;
use std::fs::{self, File};
use std::path::{Path, PathBuf};

const MISSING_CARGO_ENV: &'static str = "Missing environment variables provided by Cargo.";
const CANNOT_CREATE_FILE: &'static str = "Could not create target file";
const CANNOT_COPY_FILE: &'static str = "Could not copy file";

/// Include `.a` files generated by assembly codes
fn include_a_files(out_dir: &str) {
    let target = env::var("TARGET").expect(MISSING_CARGO_ENV);
    let out_dir = PathBuf::from(out_dir);
    let name = env::var("CARGO_PKG_NAME").expect(MISSING_CARGO_ENV);

    if &target == "riscv32imac-unknown-none-elf" {
        fs::copy(
            format!("bin/{}.a", target),
            out_dir.join(format!("lib{}.a", name)),
        )
        .unwrap();

        println!("cargo:rustc-link-lib=static={}", name);
        println!("cargo:rustc-link-search={}", out_dir.display());
        println!("cargo:rerun-if-changed=bin/{}.a", target);
    }
}

fn put_linker_script(out_dir: &str) {
    let dest_path = Path::new(&out_dir);
    let file_name = 
        if let Ok(_) = env::var("CARGO_FEATURE_GD32VF103X4") {
            "gd32vf103x4.x"
        } else if let Ok(_) = env::var("CARGO_FEATURE_GD32VF103X6") {
            "gd32vf103x6.x"
        } else if let Ok(_) = env::var("CARGO_FEATURE_GD32VF103X8") {
            "gd32vf103x8.x"
        } else if let Ok(_) = env::var("CARGO_FEATURE_GD32VF103XB") {
            "gd32vf103xb.x"
        } else {
            panic!("no target chip feature given");
        };
    let src_path = PathBuf::from("memory");
    File::create(&dest_path.join(file_name)).expect(CANNOT_CREATE_FILE);
    fs::copy(&src_path.join(file_name), &dest_path.join(file_name))
        .expect(CANNOT_COPY_FILE);
    File::create(&dest_path.join("memory-base.x")).expect(CANNOT_CREATE_FILE);
    fs::copy(&src_path.join("memory-base.x"), &dest_path.join("memory-base.x"))
        .expect(CANNOT_COPY_FILE);

    println!("cargo:rustc-link-search={}", dest_path.display());
    println!("cargo:rerun-if-changed=memory/{}.x", file_name);
    println!("cargo:rerun-if-changed=memory/memory-base.x");
}

/// Build script for the crate.
fn main() {
    let out_dir = env::var("OUT_DIR").expect(MISSING_CARGO_ENV);
    put_linker_script(&out_dir);
    include_a_files(&out_dir);
    println!("cargo:rerun-if-changed=build.rs");
}
